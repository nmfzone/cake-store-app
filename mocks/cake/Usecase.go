// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/nmfzone/privy-cake-store/cake/dto"
	domain "github.com/nmfzone/privy-cake-store/domain"

	mock "github.com/stretchr/testify/mock"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// DestroyCake provides a mock function with given fields: ctx, id
func (_m *Usecase) DestroyCake(ctx context.Context, id uint64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchCakes provides a mock function with given fields: ctx, cursor, limit
func (_m *Usecase) FetchCakes(ctx context.Context, cursor string, limit int) ([]domain.Cake, string, error) {
	ret := _m.Called(ctx, cursor, limit)

	var r0 []domain.Cake
	if rf, ok := ret.Get(0).(func(context.Context, string, int) []domain.Cake); ok {
		r0 = rf(ctx, cursor, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Cake)
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, string, int) string); ok {
		r1 = rf(ctx, cursor, limit)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, int) error); ok {
		r2 = rf(ctx, cursor, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ShowCake provides a mock function with given fields: ctx, cakeId
func (_m *Usecase) ShowCake(ctx context.Context, cakeId uint64) (domain.Cake, error) {
	ret := _m.Called(ctx, cakeId)

	var r0 domain.Cake
	if rf, ok := ret.Get(0).(func(context.Context, uint64) domain.Cake); ok {
		r0 = rf(ctx, cakeId)
	} else {
		r0 = ret.Get(0).(domain.Cake)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, cakeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreCake provides a mock function with given fields: ctx, payload
func (_m *Usecase) StoreCake(ctx context.Context, payload dto.CreateCakeDto) (domain.Cake, error) {
	ret := _m.Called(ctx, payload)

	var r0 domain.Cake
	if rf, ok := ret.Get(0).(func(context.Context, dto.CreateCakeDto) domain.Cake); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Get(0).(domain.Cake)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.CreateCakeDto) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCake provides a mock function with given fields: ctx, cakeId, payload
func (_m *Usecase) UpdateCake(ctx context.Context, cakeId uint64, payload dto.UpdateCakeDto) (domain.Cake, error) {
	ret := _m.Called(ctx, cakeId, payload)

	var r0 domain.Cake
	if rf, ok := ret.Get(0).(func(context.Context, uint64, dto.UpdateCakeDto) domain.Cake); ok {
		r0 = rf(ctx, cakeId, payload)
	} else {
		r0 = ret.Get(0).(domain.Cake)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64, dto.UpdateCakeDto) error); ok {
		r1 = rf(ctx, cakeId, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUsecase creates a new instance of Usecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUsecase(t mockConstructorTestingTNewUsecase) *Usecase {
	mock := &Usecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
